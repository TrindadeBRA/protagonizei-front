/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TrinityKitWP API
 * API para criar posts e fazer upload de imagens no WordPress
 * OpenAPI spec version: 1.0.0
 */
import type {
  GetConfigs200,
  GetConfigs401,
  GetPostSlug200,
  GetPostSlug400,
  GetPostSlug401,
  GetPostSlug404,
  GetPostSlugs200,
  GetPostSlugs401,
  GetPostSlugsParams,
  PostContactFormSubmit200,
  PostContactFormSubmit400,
  PostContactFormSubmit401,
  PostContactFormSubmit500,
  PostContactFormSubmitBody
} from './model';

/**
 * Retorna as configurações básicas do site WordPress
 * @summary Obter configurações do site
 */
export type getConfigsResponse200 = {
  data: GetConfigs200
  status: 200
}

export type getConfigsResponse401 = {
  data: GetConfigs401
  status: 401
}
    
export type getConfigsResponseComposite = getConfigsResponse200 | getConfigsResponse401;
    
export type getConfigsResponse = getConfigsResponseComposite & {
  headers: Headers;
}

export const getGetConfigsUrl = () => {


  

  return `/configs`
}

export const getConfigs = async ( options?: RequestInit): Promise<getConfigsResponse> => {
  
  const res = await fetch(getGetConfigsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getConfigsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getConfigsResponse
}



/**
 * Cria um novo registro de contato no WordPress com suporte para upload de arquivos. Todos os campos são obrigatórios exceto o arquivo anexo.
 * @summary Enviar formulário de contato
 */
export type postContactFormSubmitResponse200 = {
  data: PostContactFormSubmit200
  status: 200
}

export type postContactFormSubmitResponse400 = {
  data: PostContactFormSubmit400
  status: 400
}

export type postContactFormSubmitResponse401 = {
  data: PostContactFormSubmit401
  status: 401
}

export type postContactFormSubmitResponse500 = {
  data: PostContactFormSubmit500
  status: 500
}
    
export type postContactFormSubmitResponseComposite = postContactFormSubmitResponse200 | postContactFormSubmitResponse400 | postContactFormSubmitResponse401 | postContactFormSubmitResponse500;
    
export type postContactFormSubmitResponse = postContactFormSubmitResponseComposite & {
  headers: Headers;
}

export const getPostContactFormSubmitUrl = () => {


  

  return `/contact-form/submit`
}

export const postContactFormSubmit = async (postContactFormSubmitBody: PostContactFormSubmitBody, options?: RequestInit): Promise<postContactFormSubmitResponse> => {
    const formData = new FormData();
formData.append('name', postContactFormSubmitBody.name)
formData.append('email', postContactFormSubmitBody.email)
formData.append('phone', postContactFormSubmitBody.phone)
if(postContactFormSubmitBody.linkedin !== undefined) {
 formData.append('linkedin', postContactFormSubmitBody.linkedin)
 }
formData.append('message', postContactFormSubmitBody.message)
formData.append('tag', postContactFormSubmitBody.tag)
if(postContactFormSubmitBody.attachment !== undefined) {
 formData.append('attachment', postContactFormSubmitBody.attachment)
 }

  const res = await fetch(getPostContactFormSubmitUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postContactFormSubmitResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postContactFormSubmitResponse
}



/**
 * Retorna uma lista de posts publicados com seus detalhes. Pode ser limitado por quantidade ou paginado.
 * @summary Listar posts
 */
export type getPostSlugsResponse200 = {
  data: GetPostSlugs200
  status: 200
}

export type getPostSlugsResponse401 = {
  data: GetPostSlugs401
  status: 401
}
    
export type getPostSlugsResponseComposite = getPostSlugsResponse200 | getPostSlugsResponse401;
    
export type getPostSlugsResponse = getPostSlugsResponseComposite & {
  headers: Headers;
}

export const getGetPostSlugsUrl = (params?: GetPostSlugsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/post-slugs?${stringifiedParams}` : `/post-slugs`
}

export const getPostSlugs = async (params?: GetPostSlugsParams, options?: RequestInit): Promise<getPostSlugsResponse> => {
  
  const res = await fetch(getGetPostSlugsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPostSlugsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getPostSlugsResponse
}



/**
 * Retorna os detalhes de um post específico usando seu slug
 * @summary Obter post por slug
 */
export type getPostSlugResponse200 = {
  data: GetPostSlug200
  status: 200
}

export type getPostSlugResponse400 = {
  data: GetPostSlug400
  status: 400
}

export type getPostSlugResponse401 = {
  data: GetPostSlug401
  status: 401
}

export type getPostSlugResponse404 = {
  data: GetPostSlug404
  status: 404
}
    
export type getPostSlugResponseComposite = getPostSlugResponse200 | getPostSlugResponse400 | getPostSlugResponse401 | getPostSlugResponse404;
    
export type getPostSlugResponse = getPostSlugResponseComposite & {
  headers: Headers;
}

export const getGetPostSlugUrl = (slug: string,) => {


  

  return `/post/${slug}`
}

export const getPostSlug = async (slug: string, options?: RequestInit): Promise<getPostSlugResponse> => {
  
  const res = await fetch(getGetPostSlugUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPostSlugResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getPostSlugResponse
}
